plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'baekgwa'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // P6Spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.11.0'

    // Data Source
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // SpringDoc
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // Flyway
    implementation 'org.flywaydb:flyway-mysql:11.5.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
    finalizedBy 'printJacocoCoverage'
}


// Querydsl generated directory setting - start
def generatedDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += generatedDir
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(generatedDir)
}

clean {
    doFirst {
        delete file(generatedDir)
    }
}
// Querydsl generated directory setting - end

// Jacoco - start
jacoco {
    toolVersion = "0.8.13"
}

tasks.named('jacocoTestReport') {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'baekgwa/blogserver/global/**',
                            'baekgwa/blogserver/infra/**',
                            'baekgwa/blogserver/BlogServerApplication.class',
                            '**/Q*'
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'baekgwa/blogserver/global/**',
                    'baekgwa/blogserver/infra/**',
                    'baekgwa/blogserver/BlogServerApplication.class',
                    '**/Q*'
            ])
        }))
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

import javax.xml.parsers.DocumentBuilderFactory
import org.xml.sax.EntityResolver
import org.xml.sax.InputSource

tasks.register('printJacocoCoverage') {
    dependsOn tasks.named('jacocoTestReport')
    doLast {
        def reportFile = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
        if (reportFile.exists()) {
            def dbFactory = DocumentBuilderFactory.newInstance()
            dbFactory.setValidating(false) // DTD 검증 비활성화
            def dBuilder = dbFactory.newDocumentBuilder()

            // DTD 무시 EntityResolver
            dBuilder.setEntityResolver({ publicId, systemId ->
                new InputSource(new StringReader(""))
            } as EntityResolver)

            def doc = dBuilder.parse(reportFile)
            doc.documentElement.normalize()
            def counters = doc.getDocumentElement().getElementsByTagName("counter")
            for (int i = 0; i < counters.getLength(); i++) {
                def node = counters.item(i)
                if (node.getParentNode().isSameNode(doc.documentElement)) {
                    def type = node.getAttributes().getNamedItem("type").getTextContent()
                    def covered = node.getAttributes().getNamedItem("covered").getTextContent().toInteger()
                    def missed = node.getAttributes().getNamedItem("missed").getTextContent().toInteger()
                    def total = covered + missed
                    def percent = total == 0 ? 0 : (covered * 100) / total
                    println "[JaCoCo] TOTAL ${type} COVERAGE: ${percent}% (${covered}/${total})"
                }
            }
        } else {
            println "[JaCoCo] No jacocoTestReport.xml found."
        }
    }
}
// Jacoco - end